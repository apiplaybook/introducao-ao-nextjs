import React, { FormEvent, useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import Pagination from "../components/Pagination";
import { args } from "../config/api";

//declaração de tipos das propriedades que o component Home espera receber
interface IPropsComponent {
  list: any[];
  page: number;
  total_pages: number;
  search: boolean;
  searchParam: string;
}

const Home = ({ list, page, total_pages, searchParam }: IPropsComponent) => {
  //Inicizaliação do state que armazena os dados de lista de filmes retornados da api
  const [data, setData] = useState<any[]>([]);
  const router = useRouter();

  // Inicizaliação do state que armazena o valor do input search
  const [search, setSearch] = useState(searchParam);

  // Inicizaliação do state que armazena o valor da propriedade searchParam
  const [result, setResult] = useState<undefined | string>(undefined);

  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {
    //caso o valor do search foi setado no estado
    if (search) {
      // redireciona para pagina passando os parâmetros search e value
      return router.push(`?search=${search}&page=${value}`);
    } else {
      // redireciona para a mesma página passando o valor da página atual
      return router.push(`?page=${value}`);
    }
  };

  // Evento do form
  async function handleSearchMovie(e: FormEvent<HTMLFormElement>) {
    // desabilita o reload padrão do form
    e.preventDefault();
    // redireciona para a mesma página passando o query param search que foi setado no search
    return router.push(`/?search=${search}&page=1`);
  }

  useEffect(() => {
    // verifica se a alguma mudança no list, então é armazenado o valor do list novamente
    setData(list);
    // verifica se alguma mudança de estado no searchParam, caso sim seta o valor novamente
    setResult(searchParam);
  }, [list, searchParam]);

  return (
    <div className={styles.container}>
      <Head>
        <title>NextJs Movies DB</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className={styles.formSearch}>
          <form onSubmit={handleSearchMovie}>
            <input
              type="text"
              placeholder="Procure por um filme, série..."
              onChange={(e) => setSearch(e.target.value)}
            />
            <button type="submit">Pesquisar</button>
          </form>
        </div>
        <div className={styles.titleContainer}>
          {result ? (
            <h1>Resultados de busca para: {`${result}`}</h1>
          ) : (
            <h1>Filmes Populares</h1>
          )}
        </div>
        <div className={styles.moviesCointainer}>
          {data.map((item: any, index: number) => (
            <div key={index}>
              <Image
                src={`http://image.tmdb.org/t/p/original${item.poster_path}`}
                alt="image movie"
                width={350}
                height={400}
              />
              <div>
                {item.vote_average ? (
                  <p>
                    Nota: <span>{item.vote_average}</span>
                  </p>
                ) : (
                  <p>
                    Nota: <span>Sem avaliação</span>
                  </p>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className={styles.paginationContainer}>
        <Pagination
          total_pages={total_pages}
          page={page}
          handleChange={handleChange}
        />
      </div>
    </div>
  );
};

export default Home;

//função getServerSideProps será executado no lado do servidor, possibilitado o Server Side Rendering
export async function getServerSideProps({
  query, // query params
}: {
  query: {
    page?: string; //parâmetro page enviada na url
    search?: string; //parâmetro search page enviada na urr
  };
}) {
  if (query.search) {
    //É efetuada uma requisição GET para o servidor, retornando os dados do filme que foi passado no query param search
    const response = await fetch(
      `${args.base_url}/search/movie?api_key=${
        args.api_key // chave de acesso a API
      }&query=${
        query.search // query param search
      }&page=${
        query.page ? query.page : 1 // caso não tenha sido enviado o valor page, será definido o valor 1 por default
      }&language=pt-BR`
    );

    // desestruturação dos dodos retornados no response pegando os valores results, page, total_pages
    const { results, page, total_pages } = (await response.json()) as any;

    return {
      props: {
        list: results,
        page,
        total_pages,
        searchParam: query.search,
      },
    };
  } else {
    //É efetuada uma requisição GET para o servidor, retornando os dados de todos os filmes
    const response = await fetch(
      `${args.base_url}/trending/movie/week?api_key=${
        args.api_key // chave de acesso a API
      }&page=${
        query.page ? query.page : 1 // caso não tenha sido enviado o valor page, será definido o valor 1 por default
      }&language=pt-BR`
    );

    const { results, page, total_pages } = (await response.json()) as any;

    return {
      props: {
        list: results,
        page: page,
        total_pages: total_pages,
        searchParam: "",
      },
    };
  }
}
